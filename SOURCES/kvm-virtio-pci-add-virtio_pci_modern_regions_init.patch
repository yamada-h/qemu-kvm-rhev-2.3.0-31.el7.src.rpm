From 93c0f434c60f95beefb1126d0920fdbaa4fb9047 Mon Sep 17 00:00:00 2001
From: Xiao Wang <jasowang@redhat.com>
Date: Tue, 7 Jul 2015 09:18:50 +0200
Subject: [PATCH 076/100] virtio-pci: add virtio_pci_modern_regions_init()

Message-id: <1436260751-25015-48-git-send-email-jasowang@redhat.com>
Patchwork-id: 66826
O-Subject: [RHEL7.2 qemu-kvm-rhev PATCH V2 47/68] virtio-pci: add virtio_pci_modern_regions_init()
Bugzilla: 1227343
RH-Acked-by: Michael S. Tsirkin <mst@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>
RH-Acked-by: Laurent Vivier <lvivier@redhat.com>
RH-Acked-by: Thomas Huth <thuth@redhat.com>

From: Gerd Hoffmann <kraxel@redhat.com>

Add init function for the modern pci regions,
move over the init code.

Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
(cherry picked from commit 1141ce2190c85daacfa9b874476651ed0f7dc6df)
Signed-off-by: Miroslav Rezanina <mrezanin@redhat.com>
---
 hw/virtio/virtio-pci.c | 117 +++++++++++++++++++++++++------------------------
 1 file changed, 59 insertions(+), 58 deletions(-)

diff --git a/hw/virtio/virtio-pci.c b/hw/virtio/virtio-pci.c
index ed47a6d..2d1059d 100644
--- a/hw/virtio/virtio-pci.c
+++ b/hw/virtio/virtio-pci.c
@@ -1208,6 +1208,64 @@ static void virtio_pci_device_write(void *opaque, hwaddr addr,
     }
 }
 
+static void virtio_pci_modern_regions_init(VirtIOPCIProxy *proxy)
+{
+    static const MemoryRegionOps common_ops = {
+        .read = virtio_pci_common_read,
+        .write = virtio_pci_common_write,
+        .impl = {
+            .min_access_size = 1,
+            .max_access_size = 4,
+        },
+        .endianness = DEVICE_LITTLE_ENDIAN,
+    };
+    static const MemoryRegionOps isr_ops = {
+        .read = virtio_pci_isr_read,
+        .write = virtio_pci_isr_write,
+        .impl = {
+            .min_access_size = 1,
+            .max_access_size = 4,
+        },
+        .endianness = DEVICE_LITTLE_ENDIAN,
+    };
+    static const MemoryRegionOps device_ops = {
+        .read = virtio_pci_device_read,
+        .write = virtio_pci_device_write,
+        .impl = {
+            .min_access_size = 1,
+            .max_access_size = 4,
+        },
+        .endianness = DEVICE_LITTLE_ENDIAN,
+    };
+    static const MemoryRegionOps notify_ops = {
+        .read = virtio_pci_notify_read,
+        .write = virtio_pci_notify_write,
+        .impl = {
+            .min_access_size = 1,
+            .max_access_size = 4,
+        },
+        .endianness = DEVICE_LITTLE_ENDIAN,
+    };
+
+    memory_region_init_io(&proxy->common.mr, OBJECT(proxy),
+                          &common_ops,
+                          proxy,
+                          "virtio-pci-common", 0x1000);
+    memory_region_init_io(&proxy->isr.mr, OBJECT(proxy),
+                          &isr_ops,
+                          proxy,
+                          "virtio-pci-isr", 0x1000);
+    memory_region_init_io(&proxy->device.mr, OBJECT(proxy),
+                          &device_ops,
+                          virtio_bus_get_device(&proxy->bus),
+                          "virtio-pci-device", 0x1000);
+    memory_region_init_io(&proxy->notify.mr, OBJECT(proxy),
+                          &notify_ops,
+                          virtio_bus_get_device(&proxy->bus),
+                          "virtio-pci-notify",
+                          QEMU_VIRTIO_PCI_QUEUE_MEM_MULT *
+                          VIRTIO_QUEUE_MAX);
+}
 
 /* This is called by virtio-bus just after the device is plugged. */
 static void virtio_pci_device_plugged(DeviceState *d, Error **errp)
@@ -1290,46 +1348,6 @@ static void virtio_pci_device_plugged(DeviceState *d, Error **errp)
                 cpu_to_le32(QEMU_VIRTIO_PCI_QUEUE_MEM_MULT),
         };
 
-        static const MemoryRegionOps common_ops = {
-            .read = virtio_pci_common_read,
-            .write = virtio_pci_common_write,
-            .impl = {
-                .min_access_size = 1,
-                .max_access_size = 4,
-            },
-            .endianness = DEVICE_LITTLE_ENDIAN,
-        };
-
-        static const MemoryRegionOps isr_ops = {
-            .read = virtio_pci_isr_read,
-            .write = virtio_pci_isr_write,
-            .impl = {
-                .min_access_size = 1,
-                .max_access_size = 4,
-            },
-            .endianness = DEVICE_LITTLE_ENDIAN,
-        };
-
-        static const MemoryRegionOps device_ops = {
-            .read = virtio_pci_device_read,
-            .write = virtio_pci_device_write,
-            .impl = {
-                .min_access_size = 1,
-                .max_access_size = 4,
-            },
-            .endianness = DEVICE_LITTLE_ENDIAN,
-        };
-
-        static const MemoryRegionOps notify_ops = {
-            .read = virtio_pci_notify_read,
-            .write = virtio_pci_notify_write,
-            .impl = {
-                .min_access_size = 1,
-                .max_access_size = 4,
-            },
-            .endianness = DEVICE_LITTLE_ENDIAN,
-        };
-
         /* TODO: add io access for speed */
         virtio_pci_add_mem_cap(proxy, &common);
         virtio_pci_add_mem_cap(proxy, &isr);
@@ -1340,28 +1358,11 @@ static void virtio_pci_device_plugged(DeviceState *d, Error **errp)
         memory_region_init(&proxy->modern_bar, OBJECT(proxy), "virtio-pci",
                            2 * QEMU_VIRTIO_PCI_QUEUE_MEM_MULT *
                            VIRTIO_QUEUE_MAX);
-        memory_region_init_io(&proxy->common.mr, OBJECT(proxy),
-                              &common_ops,
-                              proxy,
-                              "virtio-pci-common", 0x1000);
+        virtio_pci_modern_regions_init(proxy);
         memory_region_add_subregion(&proxy->modern_bar, 0, &proxy->common.mr);
-        memory_region_init_io(&proxy->isr.mr, OBJECT(proxy),
-                              &isr_ops,
-                              proxy,
-                              "virtio-pci-isr", 0x1000);
         memory_region_add_subregion(&proxy->modern_bar, 0x1000, &proxy->isr.mr);
-        memory_region_init_io(&proxy->device.mr, OBJECT(proxy),
-                              &device_ops,
-                              virtio_bus_get_device(&proxy->bus),
-                              "virtio-pci-device", 0x1000);
         memory_region_add_subregion(&proxy->modern_bar, 0x2000,
                                     &proxy->device.mr);
-        memory_region_init_io(&proxy->notify.mr, OBJECT(proxy),
-                              &notify_ops,
-                              virtio_bus_get_device(&proxy->bus),
-                              "virtio-pci-notify",
-                              QEMU_VIRTIO_PCI_QUEUE_MEM_MULT *
-                              VIRTIO_QUEUE_MAX);
         memory_region_add_subregion(&proxy->modern_bar, 0x3000,
                                     &proxy->notify.mr);
         pci_register_bar(&proxy->pci_dev, modern_mem_bar,
-- 
1.8.3.1

